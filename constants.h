#include<vector>
#include<tuple>

enum CU_SIZE {
    _64x64 = 0,
    _32x32 = 1,
    _32x16 = 2,
    _16x32 = 3,
    _32x8 =  4,
    _8x32 =  5,
    _16x16 = 6,
    _16x8  = 7,
    _8x16  = 8,
    NUM_CU_SIZES = 9
};

const std::vector<std::tuple<int,int,int>> availableRes = {
  std::make_tuple<int,int,int>(3840, 2160, 510),
  std::make_tuple<int,int,int>(1920, 1080, 135),
  std::make_tuple<int,int,int>(1280,  720,  60),
  std::make_tuple<int,int,int>(832,   480,  28),
  std::make_tuple<int,int,int>(416,   240,  8)
};

const std::vector<std::string> availableFilters = {
  "filterFrame_1d_int",
  "filterFrame_1d_float",
  "filterFrame_2d_int_quarterCtu",
  "filterFrame_2d_float_quarterCtu",
  "filterFrame_1d_int_5x5",
  "filterFrame_1d_float_5x5",
  "filterFrame_2d_int_5x5_quarterCtu",
  "filterFrame_2d_float_5x5_quarterCtu"
};

const std::vector<std::string> availableFilters_arm = {
  "filterFrame_1d_int_arm",
  "filterFrame_1d_float_arm",
  "filterFrame_2d_int_quarterCtu_arm",
  "filterFrame_2d_float_quarterCtu_arm",
  "filterFrame_1d_int_5x5_arm",
  "filterFrame_1d_float_5x5_arm",
  "filterFrame_2d_int_5x5_quarterCtu_arm",
  "filterFrame_2d_float_5x5_quarterCtu_arm"
};

#define TOTAL_CUS_PER_CTU 532

#define BOUNDARY_SIZE_Id12 4
#define BOUNDARY_SIZE_Id2 4
#define BOUNDARY_SIZE_Id1 4
#define BOUNDARY_SIZE_Id0 2

#define PREDICTION_MODES_ID2 6
#define PREDICTION_MODES_ID1 8
#define PREDICTION_MODES_ID0 16

#define REDUCED_PRED_SIZE_Id2 8
#define REDUCED_PRED_SIZE_Id1 4

#define LARGEST_RED_BOUNDARY 4

const unsigned short convKernelLib[5][3][3] = {
  // V0
  {
    {  1,  1,  1  },
    {  1,  1,  1  },
    {  1,  1,  1  }
  },
  
  // V1
  {
    {  1,  2,  1  },
    {  2,  3,  2  },
    {  1,  2,  1  }
  },
  
  
  // V2
  {
    {  1,  2,  1},
    {  2,  12, 2},
    {  1,  2,  1}
  },
  
  // V3
  {
    {  1,  1,  1  },
    {  1,  8,  1  },
    {  1,  1,  1  }
  },

  // V4
  {
    {  1,  2,  1  },
    {  2,  4,  2  },
    {  1,  2,  1  }
  }
};

const unsigned short convKernelLib_5x5[3][5][5] = {
  // V0
  {
    {  1,  1,  1,  1,  1 },
    {  1,  1,  1,  1,  1 },
    {  1,  1,  1,  1,  1 },
    {  1,  1,  1,  1,  1 },
    {  1,  1,  1,  1,  1 }
  },
  
  // V1
  {
    {  1,  1,  1,  1,  1 },
    {  1,  1,  1,  1,  1 },
    {  1,  1,  5,  1,  1 },
    {  1,  1,  1,  1,  1 },
    {  1,  1,  1,  1,  1 }
  },
// 1-2-3-2-1
  {
    {  1,  2,  3,  2,  1 },
    {  2,  4,  6,  4,  2 },
    {  3,  6,  9,  6,  3 },
    {  2,  4,  6,  4,  2 },
    {  1,  2,  3,  2,  1 }
  },

};


const double convKernelLib_float[5][3][3] = {
  // V0
  {
    {  1/9.0,  1/9.0,  1/9.0  },
    {  1/9.0,  1/9.0,  1/9.0  },
    {  1/9.0,  1/9.0,  1/9.0  }
  },
  
  // V1
  {
    {  1/15.0,  2/15.0,  1/15.0  },
    {  2/15.0,  3/15.0,  2/15.0  },
    {  1/15.0,  2/15.0,  1/15.0  }
  },
  
  
  // V2
  {
    {  1/24.0,  2/24.0,  1/24.0 },
    {  2/24.0,  12/24.0, 2/24.0 },
    {  1/24.0,  2/24.0,  1/24.0 }
  },
  
  // V3
  {
    {  1/16.0,  1/16.0,  1/16.0  },
    {  1/16.0,  8/16.0,  1/16.0  },
    {  1/16.0,  1/16.0,  1/16.0  }
  },

  // V4
  {
    {  1/16.0,  2/16.0,  1/16.0  },
    {  2/16.0,  4/16.0,  2/16.0  },
    {  1/16.0,  2/16.0,  1/16.0  }
  }
};

const double convKernelLib_5x5_float[3][5][5] = {
  // V0
  {
    { 0.04 , 0.04 , 0.04 , 0.04 , 0.04 },
    { 0.04 , 0.04 , 0.04 , 0.04 , 0.04 },
    { 0.04 , 0.04 , 0.04 , 0.04 , 0.04 },
    { 0.04 , 0.04 , 0.04 , 0.04 , 0.04 },
    { 0.04 , 0.04 , 0.04 , 0.04 , 0.04 }
  },
  // V1
  {
    { 0.0345 , 0.0345 , 0.0345 , 0.0345 , 0.0345},
    { 0.0345 , 0.0345 , 0.0345 , 0.0345 , 0.0345},
    { 0.0345 , 0.0345 , 0.1724 , 0.0345 , 0.0345},
    { 0.0345 , 0.0345 , 0.0345 , 0.0345 , 0.0345},
    { 0.0345 , 0.0345 , 0.0345 , 0.0345 , 0.0345}
  },
  // 1-2-3-2-1
  {
    { 1/81.0, 2/81.0, 3/81.0, 2/81.0, 1/81.0 },
    { 2/81.0, 4/81.0, 6/81.0, 4/81.0, 2/81.0 },
    { 3/81.0, 6/81.0, 9/81.0, 6/81.0, 3/81.0 },
    { 2/81.0, 4/81.0, 6/81.0, 4/81.0, 2/81.0 },
    { 1/81.0, 2/81.0, 3/81.0, 2/81.0, 1/81.0 }
  }
};

const unsigned char widths[9] = {
                                        64,  // 64x64
                                        32,  // 32x32
                                        32,  // 32x16
                                        16,  // 16x32

                                        32,  // 32x8
                                        8,   // 8x32


                                        16,   // 16x16


                                        16,  // 16x8
                                        8,   // 8x16
};

const unsigned char heights[9] = {
                                        64,  // 64x64
                                        32,  // 32x32
                                        16,  // 32x16
                                        32,  // 16x32

                                        8,   // 32x8
                                        32,  // 8x32


                                        16,  // 16x16


                                        8,   // 16x8
                                        16   // 8x16
};

const unsigned char cusPerCtu[9] = {
    4,   // 64x64
    16,  // 32x32
    32,  // 32x16
    32,  // 16x32

    64,  // 32x8
    64,  // 8x32
    
    64,  // 16x16

    128, // 16x8
    128  // 8x16
};

const unsigned char cuColumnsPerCtu[9] = {
    2,  // 64x64
    4,  // 32x32
    4,  // 32x16
    8,  // 16x32

    4,  // 32x8
    16, // 8x32

    8,  // 16x16

    8,  // 16x8
    16  // 8x16
};

const unsigned char cuRowsPerCtu[9] = {
    2,  // 64x64
    4,  // 32x32
    8,  // 32x16
    4,  // 16x32

    16, // 32x8
    4,  // 8x32

    8,  // 16x16

    16, // 16x8
    8   // 8x16
};

// This is used as a stride when we must access information from multiple CU sizes in the same buffer
const unsigned short stridedCusPerCtu[10] = { 
    0,                          // 64x64
    0+4,                        // 32x32
    0+4+16,                     // 32x16
    0+4+16+32,                  // 16x32

    0+4+16+32+32,               // 32x8
    0+4+16+32+32+64,            // 8x32


    0+4+16+32+32+64+64,         // 16x16

    0+4+16+32+32+64+64+64,      // 16x8
    0+4+16+32+32+64+64+64+128,   // 8x16

    0+4+16+32+32+64+64+64+128+128   // TOTAL_CUS_PER_CTU
   };

// Used to access the boundaries of a specific CU size inside the unified buffer
const unsigned short stridedCompleteTopBoundaries[10] = {
  0,                                                                        // 64x64
  0 + 4*64,                                                                 // 32x32
  0 + 4*64 + 16*32,                                                         // 32x16
  0 + 4*64 + 16*32 + 32*32,                                                 // 16x32

  0 + 4*64 + 16*32 + 32*32 + 32*16,                                         // 32x8
  0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32,                                 // 8x32

  0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8,                          // 16x16

  0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8 + 64*16,                  // 16x8
  0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8 + 64*16 + 128*16,         // 8x16

  0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8 + 64*16 + 128*16 + 128*8  // TOTAL_TOP_BOUNDARIES_PER_CTU
};

const unsigned short stridedCompleteLeftBoundaries[10] = {
  0,                                                                        // 64x64
  0 + 4*64,                                                                 // 32x32
  0 + 4*64 + 16*32,                                                         // 32x16
  0 + 4*64 + 16*32 + 32*16,                                                 // 16x32

  0 + 4*64 + 16*32 + 32*16 + 32*32,                                         // 32x8
  0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8,                                  // 8x32

  0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32,                          // 16x16

  0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32 + 64*16,                  // 16x8
  0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32 + 64*16 + 128*8,          // 8x16

  0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32 + 64*16 + 128*8 + 128*16  // TOTAL_TOP_BOUNDARIES_PER_CTU
};

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
//          DATA FOR HALF-ALIGNED AND UNALIGNED CUS
//
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#define NA_TOTAL_CUS_PER_CTU 624 // Sum of cusPerCtu for all not-aligned (i.e., half-aligned and unaligned) supported CU sizes

#define NA_MAX_CUS_PER_CTU 64

enum NA_CU_SIZE {
    _NA_32x16 = 0,
    _NA_16x32 = 1,
    _NA_32x8_G1 = 2,
    _NA_32x8_G2 = 3,
    _NA_8x32_G1 = 4,
    _NA_8x32_G2 = 5,

    _NA_16x16_G1 = 6,
    _NA_16x16_G2 = 7,
    _NA_16x16_G3 = 8,  // UNALIGNED

    _NA_16x8_G1 = 9,   
    _NA_16x8_G2 = 10,
    _NA_16x8_G3 = 11, 
    _NA_16x8_G4 = 12,    // UNALIGNED
    _NA_16x8_G5 = 13,    // UNALIGNED

    _NA_8x16_G1 = 14,   
    _NA_8x16_G2 = 15,
    _NA_8x16_G3 = 16, 
    _NA_8x16_G4 = 17,    // UNALIGNED
    _NA_8x16_G5 = 18,    // UNALIGNED  
    
    NA_NUM_CU_SIZES = 19
};

const unsigned char NA_widths[19] = {
                                    32  ,// 32x16
                                    16  ,// 16x32
                                    32  ,// 32x8_G1
                                    32  ,// 32x8_G2
                                    8   ,// 8x32_G1
                                    8   ,// 8x32_G2
                                    16  ,// 16x16_G1
                                    16  ,// 16x16_G2
                                    16  ,// 16x16_G3 	UNALIGNED
                                    16  ,// 16x8_G1
                                    16  ,// 16x8_G2
                                    16  ,// 16x8_G3
                                    16  ,// 16x8_G4 	UNALIGNED
                                    16  ,// 16x8_G5 	UNALIGNED
                                    8   ,// 8x16_G1
                                    8   ,// 8x16_G2
                                    8   ,// 8x16_G3
                                    8   ,// 8x16_G4 	UNALIGNED
                                    8   // 8x16_G5 	UNALIGNED
};

const unsigned char NA_heights[19] = {
                                    16  ,// 32x16
                                    32  ,// 16x32
                                    8   ,// 32x8_G1
                                    8   ,// 32x8_G2
                                    32  ,// 8x32_G1
                                    32  ,// 8x32_G2
                                    16  ,// 16x16_G1
                                    16  ,// 16x16_G2
                                    16  ,// 16x16_G3 	UNALIGNED
                                    8   ,// 16x8_G1
                                    8   ,// 16x8_G2
                                    8   ,// 16x8_G3
                                    8   ,// 16x8_G4 	UNALIGNED
                                    8   ,// 16x8_G5 	UNALIGNED
                                    16  ,// 8x16_G1
                                    16  ,// 8x16_G2
                                    16  ,// 8x16_G3
                                    16  ,// 8x16_G4 	UNALIGNED
                                    16  // 8x16_G5 	UNALIGNED
};

const unsigned char NA_cusPerCtu[19] = {
                                    16        ,// 32x16
                                    16        ,// 16x32
                                    32        ,// 32x8_G1
                                    16        ,// 32x8_G2
                                    32        ,// 8x32_G1
                                    16        ,// 8x32_G2
                                    32        ,// 16x16_G1
                                    32        ,// 16x16_G2
                                    16        ,// 16x16_G3 	UNALIGNED
                                    64        ,// 16x8_G1
                                    64        ,// 16x8_G2
                                    32        ,// 16x8_G3
                                    32        ,// 16x8_G4 	UNALIGNED
                                    16        ,// 16x8_G5 	UNALIGNED
                                    64        ,// 8x16_G1
                                    64        ,// 8x16_G2
                                    32        ,// 8x16_G3
                                    16        ,// 8x16_G4 	UNALIGNED
                                    32        ,// 8x16_G5 	UNALIGNED
};

const unsigned char NA_cuColumnsPerCtu[19] = {
                                    4  ,// 32x16
                                    4  ,// 16x32
                                    4  ,// 32x8_G1
                                    4  ,// 32x8_G2
                                    8  ,// 8x32_G1
                                    4  ,// 8x32_G2
                                    4  ,// 16x16_G1
                                    8  ,// 16x16_G2
                                    4  ,// 16x16_G3 	UNALIGNED
                                    4  ,// 16x8_G1
                                    8  ,// 16x8_G2
                                    8  ,// 16x8_G3
                                    4  ,// 16x8_G4 	UNALIGNED
                                    4  ,// 16x8_G5 	UNALIGNED
                                    8  ,// 8x16_G1
                                    16 ,// 8x16_G2
                                    4  ,// 8x16_G3
                                    4  ,// 8x16_G4 	UNALIGNED
                                    8  // 8x16_G5 	UNALIGNED
};

const unsigned char NA_cuRowsPerCtu[19] = {
                                    4  ,// 32x16
                                    4  ,// 16x32
                                    8  ,// 32x8_G1
                                    4  ,// 32x8_G2
                                    4  ,// 8x32_G1
                                    4  ,// 8x32_G2
                                    8  ,// 16x16_G1
                                    4  ,// 16x16_G2
                                    4  ,// 16x16_G3 	UNALIGNED
                                    16 ,// 16x8_G1
                                    8  ,// 16x8_G2
                                    4  ,// 16x8_G3
                                    8  ,// 16x8_G4 	UNALIGNED
                                    4  ,// 16x8_G5 	UNALIGNED
                                    8  ,// 8x16_G1
                                    4  ,// 8x16_G2
                                    8  ,// 8x16_G3
                                    4  ,// 8x16_G4 	UNALIGNED
                                    4  // 8x16_G5 	UNALIGNED
};

// This is used as a stride when we must access information from multiple CU sizes in the same buffer
const unsigned short NA_stridedCusPerCtu[20] = { 


    0                                                           ,// 32x16
    0+16                                                        ,// 16x32
    0+16+16                                                     ,// 32x8_G1
    0+16+16+32                                                  ,// 32x8_G2
    0+16+16+32+16                                               ,// 8x32_G1
    0+16+16+32+16+32                                            ,// 8x32_G2
    0+16+16+32+16+32+16                                         ,// 16x16_G1
    0+16+16+32+16+32+16+32                                      ,// 16x16_G2
    0+16+16+32+16+32+16+32+32                                   ,// 16x16_G3 	UNALIGNED
    0+16+16+32+16+32+16+32+32+16                                ,// 16x8_G1
    0+16+16+32+16+32+16+32+32+16+64                             ,// 16x8_G2
    0+16+16+32+16+32+16+32+32+16+64+64                          ,// 16x8_G3
    0+16+16+32+16+32+16+32+32+16+64+64+32                       ,// 16x8_G4 	UNALIGNED
    0+16+16+32+16+32+16+32+32+16+64+64+32+32                    ,// 16x8_G5 	UNALIGNED
    0+16+16+32+16+32+16+32+32+16+64+64+32+32+16                 ,// 8x16_G1
    0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64              ,// 8x16_G2
    0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64           ,// 8x16_G3
    0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32        ,// 8x16_G4 	UNALIGNED
    0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16     ,// 8x16_G5 	UNALIGNED
    

    0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16+32   // TOTAL_NA_CUS_PER_CTU
   };

// Used to access the boundaries of a specific CU size inside the unified buffer
const unsigned short NA_stridedCompleteTopBoundaries[20] = {
    // width * nCUs
    0                                                                                                                                                   ,// 32x16
    0 + 32*16                                                                                                                                           ,// 16x32
    0 + 32*16 + 16*16                                                                                                                                   ,// 32x8_G1
    0 + 32*16 + 16*16 + 32*32                                                                                                                           ,// 32x8_G2
    0 + 32*16 + 16*16 + 32*32 + 32*16                                                                                                                   ,// 8x32_G1
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32                                                                                                            ,// 8x32_G2
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16                                                                                                     ,// 16x16_G1
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32                                                                                             ,// 16x16_G2
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32                                                                                     ,// 16x16_G3 	UNALIGNED
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16                                                                             ,// 16x8_G1
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64                                                                     ,// 16x8_G2
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64                                                             ,// 16x8_G3
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32                                                     ,// 16x8_G4 	UNALIGNED
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32                                             ,// 16x8_G5 	UNALIGNED
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16                                     ,// 8x16_G1
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64                              ,// 8x16_G2
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64                       ,// 8x16_G3
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32     			      ,// 8x16_G4 	UNALIGNED
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*16     	  ,// 8x16_G5 	UNALIGNED
  
    0 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*16 + 8*32  // NA_TOTAL_TOP_BOUNDARIES_PER_CTU
};

const unsigned short NA_stridedCompleteLeftBoundaries[20] = {
  
    // height * nCUs
    0                                                                                                                                                   ,// 32x16
    0 + 16*16                                                                                                                                           ,// 16x32
    0 + 16*16 + 32*16                                                                                                                                   ,// 32x8_G1
    0 + 16*16 + 32*16 + 8*32                                                                                                                            ,// 32x8_G2
    0 + 16*16 + 32*16 + 8*32 + 8*16                                                                                                                     ,// 8x32_G1
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32                                                                                                             ,// 8x32_G2
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16                                                                                                     ,// 16x16_G1
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32                                                                                             ,// 16x16_G2
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32                                                                                     ,// 16x16_G3    UNALIGNED
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16                                                                             ,// 16x8_G1
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64                                                                      ,// 16x8_G2
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64                                                               ,// 16x8_G3
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32                                                        ,// 16x8_G4     UNALIGNED
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32                                                 ,// 16x8_G5     UNALIGNED
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16                                          ,// 8x16_G1
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64                                  ,// 8x16_G2
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64                          ,// 8x16_G3
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64 + 16*32                  ,// 8x16_G4     UNALIGNED
    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64 + 16*32 + 16*16          ,// 8x16_G5     UNALIGNED

    0 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64 + 16*32 + 16*16 + 16*32   // NA_TOTAL_LEFT_BOUNDARIES_PER_CTU
  

};


// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
//          DATA FOR ALL CU TYPES TOGETHER
//          A SINGLE DATA STRUCTURE HOLDS THE DATA FOR ALL SizeId=2 SIZES, FOR ALL ALIGNMENTS
//
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#define ALL_MAX_CUS_PER_CTU 1024

#define ALL_TOTAL_CUS_SizeId12_PER_CTU 4356 // Sum of cusPerCtu for all CUs SizeId={1,2} with all alignments
#define ALL_TOTAL_CUS_SizeId0_PER_CTU 1024 // Sum of cusPerCtu for all CUs SizeId={0} with all alignments
#define ALL_TOTAL_CUS_SizeId012_PER_CTU 5380

enum ALL_CU_SIZE {
    // ALIGNED
    ALL_AL_64x64 = 0,
    ALL_AL_32x32 = 1,
    ALL_AL_32x16 = 2,
    ALL_AL_16x32 = 3,
    ALL_AL_32x8 =  4,
    ALL_AL_8x32 =  5,
    ALL_AL_16x16 = 6,
    ALL_AL_16x8  = 7,
    ALL_AL_8x16  = 8,
    

    ALL_NA_32x16    = 9,
    ALL_NA_16x32    = 10,
    ALL_NA_32x8_G1  = 11,
    ALL_NA_32x8_G2  = 12,
    ALL_NA_8x32_G1  = 13,
    ALL_NA_8x32_G2  = 14,
    ALL_NA_16x16_G1 = 15,
    ALL_NA_16x16_G2 = 16,
    ALL_NA_16x16_G3 = 17,  // UNALIGNED
    ALL_NA_16x8_G1  = 18,   
    ALL_NA_16x8_G2  = 19,
    ALL_NA_16x8_G3  = 20, 
    ALL_NA_16x8_G4  = 21,    // UNALIGNED
    ALL_NA_16x8_G5  = 22,    // UNALIGNED
    ALL_NA_8x16_G1  = 23,   
    ALL_NA_8x16_G2  = 24,
    ALL_NA_8x16_G3  = 25, 
    ALL_NA_8x16_G4  = 26,    // UNALIGNED
    ALL_NA_8x16_G5  = 27,    // UNALIGNED  
    NUM_CU_SIZES_SizeId2 = 28, 

    // SizeId=1
    FIRST_SizeId1   = 28,
    ALL_AL_32x4     = 28,
    ALL_AL_4x32     = 29,
    ALL_AL_16x4     = 30,
    ALL_AL_4x16     = 31,
    ALL_AL_8x8      = 32,
    ALL_AL_8x4_1half      = 33,
    ALL_AL_8x4_2half      = 34,
    ALL_AL_4x8_1half      = 35,
    ALL_AL_4x8_2half      = 36,

    ALL_NA_16x4_G123 = 37,
    ALL_NA_4x16_G123 = 38,
    ALL_NA_8x8_G1   = 39,
    ALL_NA_8x8_G2   = 40,
    ALL_NA_8x8_G3   = 41,
    ALL_NA_8x8_G4   = 42,
    ALL_NA_8x8_G5   = 43, // UNALIGNED
    ALL_NA_8x4_G1   = 44,
    ALL_NA_4x8_G1   = 45,
    NUM_CU_SIZES_SizeId1 = 18,

    // SizeId=0
    FIRST_SizeId0   = 46,
    ALL_AL_4x4      = 46,
    NUM_CU_SIZES_SizeId0 = 1,
    
    ALL_NUM_CU_SIZES = 47
  };


enum SizeIds {
  SizeId_0            = 0,
  SizeId_1            = 1,
  SizeId_2            = 2,
};

const char ALL_sizeIds[46] = {
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    // SizeId=1
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
};


const char ALL_reducedBoundarySizes[47] = {
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    // SizeId=1
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    // SizeId=0
    2
};

const char ALL_reducedPredSizes[47] = {
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    // SizeId=1
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    // SizeId=0
    4
};

const unsigned char ALL_widths[47] = {
                                      // ALIGNED
                                      64,  // 64x64
                                      32,  // 32x32
                                      32,  // 32x16
                                      16,  // 16x32
                                      32,  // 32x8
                                      8,   // 8x32
                                      16,  // 16x16
                                      16,  // 16x8
                                      8,   // 8x16
                                      
                                      // NOT ALIGNED (HALF-ALIGNED OR UNALIGNED)
                                      32  ,// 32x16
                                      16  ,// 16x32
                                      32  ,// 32x8_G1
                                      32  ,// 32x8_G2
                                      8   ,// 8x32_G1
                                      8   ,// 8x32_G2
                                      16  ,// 16x16_G1
                                      16  ,// 16x16_G2
                                      16  ,// 16x16_G3 	UNALIGNED
                                      16  ,// 16x8_G1
                                      16  ,// 16x8_G2
                                      16  ,// 16x8_G3
                                      16  ,// 16x8_G4 	UNALIGNED
                                      16  ,// 16x8_G5 	UNALIGNED
                                      8   ,// 8x16_G1
                                      8   ,// 8x16_G2
                                      8   ,// 8x16_G3
                                      8   ,// 8x16_G4 	UNALIGNED
                                      8   ,// 8x16_G5 	UNALIGNED

                                      // SizeId=1
                                      32  ,// 32x4
                                      4   ,// 4x32
                                      16  ,// 16x4 ALIGNED
                                      4   ,// 4x16 ALIGNED
                                      8   ,// 8x8 ALIGNED
                                      8   ,// 8x4 ALIGNED 1half
                                      8   ,// 8x4 ALIGNED 2half
                                      4   ,// 4x8 ALIGNED 1half
                                      4   ,// 4x8 ALIGNED 2half


                                      16  ,// 16x4_G123
                                      4   ,// 4x16_G123
                                      8   ,// 8x8_G1
                                      8   ,// 8x8_G2
                                      8   ,// 8x8_G3
                                      8   ,// 8x8_G4
                                      8   ,// 8x8_G5
                                      8   ,// 8x4_G1
                                      4   ,// 4x8_G2

                                      // SizeId=0
                                      4
};

const unsigned char ALL_heights[47] = {
                                    // ALIGNED
                                    64,  // 64x64
                                    32,  // 32x32
                                    16,  // 32x16
                                    32,  // 16x32
                                    8,   // 32x8
                                    32,  // 8x32
                                    16,  // 16x16
                                    8,   // 16x8
                                    16,   // 8x16

                                    // NOT ALIGNED
                                    16  ,// 32x16
                                    32  ,// 16x32
                                    8   ,// 32x8_G1
                                    8   ,// 32x8_G2
                                    32  ,// 8x32_G1
                                    32  ,// 8x32_G2
                                    16  ,// 16x16_G1
                                    16  ,// 16x16_G2
                                    16  ,// 16x16_G3 	UNALIGNED
                                    8   ,// 16x8_G1
                                    8   ,// 16x8_G2
                                    8   ,// 16x8_G3
                                    8   ,// 16x8_G4 	UNALIGNED
                                    8   ,// 16x8_G5 	UNALIGNED
                                    16  ,// 8x16_G1
                                    16  ,// 8x16_G2
                                    16  ,// 8x16_G3
                                    16  ,// 8x16_G4 	UNALIGNED
                                    16  ,// 8x16_G5 	UNALIGNED

                                    // SizeId=1
                                    4   ,// 32x4
                                    32  ,// 4x32
                                    4   ,// 16x4 ALIGNED
                                    16  ,// 4x16 ALIGNED
                                    8   ,// 8x8 ALIGNED
                                    4   ,// 8x4 ALIGNED 1half
                                    4   ,// 8x4 ALIGNED 2half
                                    8   ,// 4x8 ALIGNED 1half
                                    8   ,// 4x8 ALIGNED 2half


                                    4   ,// 16x4_G123
                                    16  ,// 4x16_G123
                                    8   ,// 8x8_G1
                                    8   ,// 8x8_G2
                                    8   ,// 8x8_G3
                                    8   ,// 8x8_G4
                                    8   ,// 8x8_G5
                                    4   ,// 8x4_G1
                                    8   ,// 4x8_G2                               

                                    // SizeId=0
                                    4
};

const unsigned short ALL_cusPerCtu[47] = {
                                    // ALIGNED
                                    4,   // 64x64
                                    16,  // 32x32
                                    32,  // 32x16
                                    32,  // 16x32
                                    64,  // 32x8
                                    64,  // 8x32
                                    64,  // 16x16
                                    128, // 16x8
                                    128, // 8x16

                                    // NOT ALIGNED
                                    16        ,// 32x16
                                    16        ,// 16x32
                                    32        ,// 32x8_G1
                                    16        ,// 32x8_G2
                                    32        ,// 8x32_G1
                                    16        ,// 8x32_G2
                                    32        ,// 16x16_G1
                                    32        ,// 16x16_G2
                                    16        ,// 16x16_G3 	UNALIGNED
                                    64        ,// 16x8_G1
                                    64        ,// 16x8_G2
                                    32        ,// 16x8_G3
                                    32        ,// 16x8_G4 	UNALIGNED
                                    16        ,// 16x8_G5 	UNALIGNED
                                    64        ,// 8x16_G1
                                    64        ,// 8x16_G2
                                    32        ,// 8x16_G3
                                    16        ,// 8x16_G4 	UNALIGNED
                                    32        ,// 8x16_G5 	UNALIGNED

                                    // SizeID=1
                                    128       ,// 32x4
                                    128       ,// 4x32
                                    256       ,// 16x4 ALIGNED
                                    256       ,// 4x16  ALIGNED
                                   
                                    256       ,// 8x8 ALIGNED
                                    256       ,// 8x4 ALIGNED 1half
                                    256       ,// 8x4 ALIGNED 2half
                                    256       ,// 4x8 ALIGNED 1half
                                    256       ,// 4x8 ALIGNED 2half

                                    128        ,// 16x4_G123
                                    128        ,// 4x16_G123
                                    128       ,// 8x8_G1
                                    32        ,// 8x8_G2
                                    128       ,// 8x8_G3
                                    32        ,// 8x8_G4
                                    64        ,// 8x8_G5 // UNALIGNED
                                    256       ,// 8x4_G1
                                    256       ,// 4x8_G2   
                                    1024        // 4x4

};

// Used to access the boundaries of a specific CU size inside the unified buffer
const unsigned int ALL_stridedCompleteTopBoundaries[48] = {
    // width * nCUs
    // ALIGNED
    0,                                                                        // 64x64
    0 + 4*64,                                                                 // 32x32
    0 + 4*64 + 16*32,                                                         // 32x16
    0 + 4*64 + 16*32 + 32*32,                                                 // 16x32
    0 + 4*64 + 16*32 + 32*32 + 32*16,                                         // 32x8
    0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32,                                 // 8x32
    0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8,                          // 16x16
    0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8 + 64*16,                  // 16x8
    0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8 + 64*16 + 128*16,         // 8x16

    // 0 + 4*64 + 16*32 + 32*32 + 32*16 + 64*32 + 64*8 + 64*16 + 128*16 + 128*8  // ALIGNED TOTAL_TOP_BOUNDARIES_PER_CTU = 8960

    // width * nCUs
    // NOT ALIGNED
    8960                                                                                                                                                   ,// 32x16
    8960 + 32*16                                                                                                                                           ,// 16x32
    8960 + 32*16 + 16*16                                                                                                                                   ,// 32x8_G1
    8960 + 32*16 + 16*16 + 32*32                                                                                                                           ,// 32x8_G2
    8960 + 32*16 + 16*16 + 32*32 + 32*16                                                                                                                   ,// 8x32_G1
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32                                                                                                            ,// 8x32_G2
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16                                                                                                     ,// 16x16_G1
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32                                                                                             ,// 16x16_G2
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32                                                                                     ,// 16x16_G3 	UNALIGNED
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16                                                                             ,// 16x8_G1
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64                                                                     ,// 16x8_G2
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64                                                             ,// 16x8_G3
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32                                                     ,// 16x8_G4 	UNALIGNED
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32                                             ,// 16x8_G5 	UNALIGNED
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16                                     ,// 8x16_G1
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64                              ,// 8x16_G2
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64                       ,// 8x16_G3
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32     			      ,// 8x16_G4 	UNALIGNED
    8960 + 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*16     	  ,// 8x16_G5 	UNALIGNED
  
    // 32*16 + 16*16 + 32*32 + 32*16 + 8*32 + 8*16 + 16*32 + 16*32 + 16*16 + 16*64 + 16*64 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*16 + 8*32  NOT ALIGNED TOTAL_TOP_BOUNDARIES_PER_CTU = 8960

    17920, // 8960 + 8960,                     // 32x4
    17920 + 32*128,                             // 4x32
    17920 + 32*128 + 4*128,                     // 16x4 ALIGNED
    17920 + 32*128 + 4*128 + 16*256,            // 4x16 ALIGNED
    
    17920 + 32*128 + 4*128 + 16*256 + 4*256 ,// 8x8 ALIGNED
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256                         ,// 8x4 ALIGNED 1half
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256                 ,// 8x4 ALIGNED 2half
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256         ,// 4x8 ALIGNED 1half
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 ,// 4x8 ALIGNED 2half


    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256   ,// 16x4_G123
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128,// 4x16_G123
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128,// 8x8_G1
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128  ,// 8x8_G2
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32  ,// 8x8_G3
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32 + 8*128  ,// 8x8_G4
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32 + 8*128 + 8*32 ,// 8x8_G5
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64  ,// 8x4_G1
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64 + 8*256,  // 4x8_G1             

    // SizeId=0
    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64 + 8*256 + 4*256,  // 4x4


    17920 + 32*128 + 4*128 + 16*256 + 4*256 + 8*256 + 8*256 + 8*256 + 4*256 + 4*256 + 16*128 + 4*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64 + 8*256 + 4*256 + 4*1024    // ALL_TOTAL_TOP_BOUNDARIES_PER_CTU = 48640


};

const unsigned int ALL_stridedCompleteLeftBoundaries[48] = {
    // height * nCUs
    // ALIGNED
    0,                                                                        // 64x64  
    0 + 4*64,                                                                 // 32x32
    0 + 4*64 + 16*32,                                                         // 32x16
    0 + 4*64 + 16*32 + 32*16,                                                 // 16x32
    0 + 4*64 + 16*32 + 32*16 + 32*32,                                         // 32x8
    0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8,                                  // 8x32
    0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32,                          // 16x16
    0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32 + 64*16,                  // 16x8
    0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32 + 64*16 + 128*8,          // 8x16

    // 0 + 4*64 + 16*32 + 32*16 + 32*32 + 64*8 + 64*32 + 64*16 + 128*8 + 128*16  // ALIGNED TOTAL_TOP_BOUNDARIES_PER_CTU = 8960

    // height * nCUs
    // NOT ALIGNED
    8960                                                                                                                                                   ,// 32x16
    8960 + 16*16                                                                                                                                           ,// 16x32
    8960 + 16*16 + 32*16                                                                                                                                   ,// 32x8_G1
    8960 + 16*16 + 32*16 + 8*32                                                                                                                            ,// 32x8_G2
    8960 + 16*16 + 32*16 + 8*32 + 8*16                                                                                                                     ,// 8x32_G1
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32                                                                                                             ,// 8x32_G2
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16                                                                                                     ,// 16x16_G1
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32                                                                                             ,// 16x16_G2
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32                                                                                     ,// 16x16_G3    UNALIGNED
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16                                                                             ,// 16x8_G1
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64                                                                      ,// 16x8_G2
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64                                                               ,// 16x8_G3
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32                                                        ,// 16x8_G4     UNALIGNED
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32                                                 ,// 16x8_G5     UNALIGNED
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16                                          ,// 8x16_G1
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64                                  ,// 8x16_G2
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64                          ,// 8x16_G3
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64 + 16*32                  ,// 8x16_G4     UNALIGNED
    8960 + 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64 + 16*32 + 16*16          ,// 8x16_G5     UNALIGNED

    // 16*16 + 32*16 + 8*32 + 8*16 + 32*32 + 32*16 + 16*32 + 16*32 + 16*16 + 8*64 + 8*64 + 8*32 + 8*32 + 8*16 + 16*64 + 16*64 + 16*32 + 16*16 + 16*32   // NOT ALIGNED TOTAL_LEFT_BOUNDARIES_PER_CTU = 8960
  
    17920, // 8960 + 8960                       // 32x4
    17920 + 4*128,                              // 4x32
    17920 + 4*128 + 32*128,                     // 16x4 ALIGNED
    17920 + 4*128 + 32*128 + 4*256,             // 4x16 ALIGNED
    
    
    17920 + 4*128 + 32*128 + 4*256 + 16*256 ,// 8x8 ALIGNED
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256  ,// 8x4 ALIGNED 1half
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256  ,// 8x4 ALIGNED 2half
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256   ,// 4x8 ALIGNED 1half
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256   ,// 4x8 ALIGNED 2half


    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256   ,// 16x4_G123
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128   ,// 4x16_G123
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128   ,// 8x8_G1
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128  ,// 8x8_G2
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32  ,// 8x8_G3
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32 + 8*128  ,// 8x8_G4
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32 + 8*128 + 8*32 ,// 8x8_G5
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64  ,// 8x4_G1
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64 + 4*256,  // 4x8_G1

    // SizeId=0           
    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64 + 4*256 + 8*256,  // 4x4

    17920 + 4*128 + 32*128 + 4*256 + 16*256 + 8*256 + 4*256 + 4*256 + 8*256 + 8*256 + 4*128 + 16*128 + 8*128 + 8*32 + 8*128 + 8*32 + 8*64 + 4*256 + 8*256 + 4*1024     // ALL_TOTAL_TOP_BOUNDARIES_PER_CTU = 48640
};

// --------------------

const unsigned char ALL_cuColumnsPerCtu[47] = {
                                    // ALIGNED
                                    2   ,// 64x64
                                    4   ,// 32x32 
                                    4   ,// 32x16
                                    8   ,// 16x32
                                    4   ,// 32x8 
                                    16  ,// 8x32 
                                    8   ,// 16x16
                                    8   ,// 16x8 
                                    16  ,// 8x16 
                                    
                                    // NOT ALIGNED
                                    4  ,// 32x16
                                    4  ,// 16x32
                                    4  ,// 32x8_G1
                                    4  ,// 32x8_G2
                                    8  ,// 8x32_G1
                                    4  ,// 8x32_G2
                                    4  ,// 16x16_G1
                                    8  ,// 16x16_G2
                                    4  ,// 16x16_G3 	UNALIGNED
                                    4  ,// 16x8_G1
                                    8  ,// 16x8_G2
                                    8  ,// 16x8_G3
                                    4  ,// 16x8_G4 	UNALIGNED
                                    4  ,// 16x8_G5 	UNALIGNED
                                    8  ,// 8x16_G1
                                    16 ,// 8x16_G2
                                    4  ,// 8x16_G3
                                    4  ,// 8x16_G4 	UNALIGNED
                                    8  ,// 8x16_G5 	UNALIGNED

                                    // SizeID=1
                                    4, // 32x4
                                    32, // 4x32
                                    8, // 16x4 ALIGNED
                                    32, // 4x32 ALIGNED 

                                    16       ,// 8x8 ALIGNED
                                    16       ,// 8x4 ALIGNED 1half
                                    16       ,// 8x4 ALIGNED 2half
                                    32       ,// 4x8 ALIGNED 1half
                                    32       ,// 4x8 ALIGNED 2half
                                    4        ,// 16x4_G123
                                    32        ,// 4x16_G123
                                    8       ,// 8x8_G1
                                    4        ,// 8x8_G2
                                    16       ,// 8x8_G3
                                    8        ,// 8x8_G4
                                    8        ,// 8x8_G5 // UNALIGNED
                                    8       ,// 8x4_G1
                                    32       ,// 4x8_G2  

                                    // SizeId=0
                                    32        // 4x4  

};

const unsigned char ALL_cuRowsPerCtu[47] = {
                                    // ALIGNED
                                    2  ,// 64x64
                                    4  ,// 32x32 
                                    8  ,// 32x16
                                    4  ,// 16x32
                                    16 ,// 32x8 
                                    4  ,// 8x32 
                                    8  ,// 16x16
                                    16 ,// 16x8 
                                    8  ,// 8x16 

                                    // NOT ALIGNED
                                    4  ,// 32x16
                                    4  ,// 16x32
                                    8  ,// 32x8_G1
                                    4  ,// 32x8_G2
                                    4  ,// 8x32_G1
                                    4  ,// 8x32_G2
                                    8  ,// 16x16_G1
                                    4  ,// 16x16_G2
                                    4  ,// 16x16_G3 	UNALIGNED
                                    16 ,// 16x8_G1
                                    8  ,// 16x8_G2
                                    4  ,// 16x8_G3
                                    8  ,// 16x8_G4 	UNALIGNED
                                    4  ,// 16x8_G5 	UNALIGNED
                                    8  ,// 8x16_G1
                                    4  ,// 8x16_G2
                                    8  ,// 8x16_G3
                                    4  ,// 8x16_G4 	UNALIGNED
                                    4  ,// 8x16_G5 	UNALIGNED

                                    // SizeID=1
                                    32, // 32x4
                                    4, // 4x32
                                    32, // 16x4
                                    8, // 4x16


                                    16       ,// 8x8 ALIGNED
                                    16       ,// 8x4 ALIGNED 1half
                                    16       ,// 8x4 ALIGNED 2half
                                    8       ,// 4x8 ALIGNED 1half
                                    8       ,// 4x8 ALIGNED 1half

                                    32        ,// 16x4_G123
                                    4        ,// 4x16_G123
                                    16       ,// 8x8_G1
                                    8        ,// 8x8_G2
                                    8       ,// 8x8_G3
                                    4        ,// 8x8_G4
                                    8        ,// 8x8_G5 // UNALIGNED
                                    32       ,// 8x4_G1
                                    8        ,// 4x8_G2  

                                    // SizeId=0
                                    32        // 4x4
};

const unsigned char ALL_X_POS[46][256] = 
{
  // ALIGNED
  /* 64x64 */     {0, 64, 0, 64},
  /* 32x32 */     {0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96},
  /* 32x16 */     {0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96},
  /* 16x32 */     {0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112},
  /* 32x8 */      {0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96},
  /* 8x32 */      {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
  /* 16x16 */     {0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112},
  /* 16x8 */      {0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112},
  /* 8x16 */      {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
  
  // NOT ALIGNED
  /* 32x16 */     {0, 32, 64, 96, 0,  32, 64, 96, 0,  32, 64, 96, 0,   32,  64,  96}, // QT-QT-TH
  /* 16x32 */     {8, 40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104}, // QT-QT-TV
  /* 32x8_G1 */   {0, 32, 64, 96, 0,  32, 64, 96, 0,  32, 64, 96, 0,  32, 64, 96, 0,  32, 64, 96, 0,  32, 64, 96, 0,   32,  64,  96,  0,   32,  64,  96 },  // QT-QT-BH-TH
  /* 32x8_G2 */   {0,  32, 64, 96, 0,  32, 64, 96, 0,  32, 64, 96, 0,   32,  64,  96},  // QT-QT-TH-TH
  /* 8x32_G1 */   {4, 20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116},  // QT-QT-BV-TV
  /* 8x32_G2 */   {12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108},  // QT-QT-TV-TV
  /* 16x16_G1 */  {8, 40, 72, 104, 8, 40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,   40,  72,  104}, // QT-QT-BH-TV
  /* 16x16_G2 */  {0, 16, 32, 48, 64, 80, 96, 112, 0,  16, 32, 48, 64, 80, 96, 112, 0,  16, 32, 48, 64, 80, 96, 112, 0,   16,  32,  48,  64 , 80,  96,  112}, // QT-QT-BV-TH
  /* 16x16_G3 */  {8, 40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,   40,  72,  104}, // QT-QT-TH-TV
  /* 16x8_G1 */   {8, 40, 72, 104, 8, 40, 72, 104, 8,  40, 72, 104, 8, 40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,   40,  72,  104, 8,   40,  72,  104, 8,   40,  72,  104}, // QT-QT-BH-BH-TV (QT-QT-TH-TV)
  /* 16x8_G2 */   {0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0,   16,  32,  48,  64,  80,  96,  112, 0,   16,  32,  48,  64,  80,  96,  112}, // QT-QT-BH-BV-TH (QT-QT-QT-TH)
  /* 16x8_G3 */   {0,  16, 32, 48, 64, 80, 96, 112, 0,  16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0,   16,  32,  48,  64,  80,  96,  112}, // QT-QT-BV-TH-TH (QT-QT-TH-BV-TH)
  /* 16x8_G4 */   {8, 40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,   40,  72,  104, 8,   40,  72,  104}, // QT-QT-BH-TV-TH
  /* 16x8_G5 */   {8,  40, 72, 104, 8,  40, 72, 104, 8,  40, 72, 104, 8,   40,  72,  104}, // QT-QT-TH-TH-TV
  /* 8x16_G1 */   {4, 20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,   20,  36,  52,  68,  84,  100, 116}, // QT-QT-QT-TV
  /* 8x16_G2 */   {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0,  8,  16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0,  8,  16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0,   8,   16,  24,  32,  40,  48,  56,  64,  72,  80,  88,  96,  104, 112, 120}, // QT-QT-BV-BV-TH
  /* 8x16_G3 */   {12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12,  44,  76,  108}, // QT-QT-BH-TV-TV
  /* 8x16_G4 */   {12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12,  44,  76,  108}, // QT-QT-TH-TV-TV
  /* 8x16_G5 */   {4, 20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,  20, 36, 52, 68, 84, 100, 116, 4,   20,  36,  52,  68,  84,  100, 116}, // QT-QT-BV-TH-TV
  
  // SIZEID = 1
  /* 32x4 */      {0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96, 0, 32, 64, 96},
  /* 4x32 */      {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124},
  /* 16x4_G1 */   {0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112, 0, 16, 32, 48, 64, 80, 96, 112},
  /* 4x16_G1 */   {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124},



/* 8x8 */         {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
/* 8x4 1half*/         {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
/* 8x4 2half*/         {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
/* 4x8 1half*/         {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124},
/* 4x8 2half*/         {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124},

/* 16x4_G123 */    {8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104, 8, 40, 72, 104}, 
/* 4x16_G123 */    {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124},
/* 8x8_G1 */      {4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116},
/* 8x8_G2 */      {12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108, 12, 44, 76, 108},
/* 8x8_G3 */      {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120},
/* 8x8_G4 */      {0, 24, 32, 56, 64, 88, 96, 120, 0, 24, 32, 56, 64, 88, 96, 120, 0, 24, 32, 56, 64, 88, 96, 120, 0, 24, 32, 56, 64, 88, 96, 120},
/* 8x8_G5 */      {4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116},
/* 8x4_G1 */      {4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116, 4, 20, 36, 52, 68, 84, 100, 116},
/* 4x8_G2 */      {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124},

};

const unsigned char ALL_Y_POS[46][256] = 
{
  // ALIGNED
  /* 64x64 */     {0, 0, 64, 64},
  /* 32x32 */     {0, 0, 0, 0, 32, 32, 32, 32, 64, 64, 64, 64, 96, 96, 96, 96},
  /* 32x16 */     {0, 0, 0, 0, 16, 16, 16, 16, 32, 32, 32, 32, 48, 48, 48, 48, 64, 64, 64, 64, 80, 80, 80, 80, 96, 96, 96, 96, 112, 112, 112, 112},
  /* 16x32 */     {0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96, 96, 96, 96, 96, 96},
  /* 32x8 */      {0, 0, 0, 0, 8, 8, 8, 8, 16, 16, 16, 16, 24, 24, 24, 24, 32, 32, 32, 32, 40, 40, 40, 40, 48, 48, 48, 48, 56, 56, 56, 56, 64, 64, 64, 64, 72, 72, 72, 72, 80, 80, 80, 80, 88, 88, 88, 88, 96, 96, 96, 96, 104, 104, 104, 104, 112, 112, 112, 112, 120, 120, 120, 120},
  /* 8x32 */      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
  /* 16x16 */     {0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 48, 48, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 80, 80, 80, 80, 80, 80, 80, 80, 96, 96, 96, 96, 96, 96, 96, 96, 112, 112, 112, 112, 112, 112, 112, 112},
  /* 16x8 */      {0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 56, 56, 56, 56, 56, 56, 56, 56, 64, 64, 64, 64, 64, 64, 64, 64, 72, 72, 72, 72, 72, 72, 72, 72, 80, 80, 80, 80, 80, 80, 80, 80, 88, 88, 88, 88, 88, 88, 88, 88, 96, 96, 96, 96, 96, 96, 96, 96, 104, 104, 104, 104, 104, 104, 104, 104, 112, 112, 112, 112, 112, 112, 112, 112, 120, 120, 120, 120, 120, 120, 120, 120},
  /* 8x16 */      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},

  // NOT ALIGNED
  /* 32x16 */     {8, 8,  8,  8,  40, 40, 40, 40, 72, 72, 72, 72, 104, 104, 104, 104},
  /* 16x32 */     {0, 0,  0,  0,   32, 32, 32, 32,  64, 64, 64, 64,  96, 96, 96, 96},
  /* 32x8_G1 */   {4, 4,  4,  4,  20, 20, 20, 20, 36, 36, 36, 36, 52, 52, 52, 52, 68, 68, 68, 68, 84, 84, 84, 84, 100, 100, 100, 100, 116, 116, 116, 116},
  /* 32x8_G2 */   {12, 12, 12, 12, 44, 44, 44, 44, 76, 76, 76, 76, 108, 108, 108, 108},
  /* 8x32_G1 */   {0, 0,  0,  0,  0,  0,  0,   0,   32, 32, 32, 32, 32, 32, 32,  32, 64, 64, 64, 64, 64, 64, 64,  64,  96, 96, 96, 96, 96, 96, 96,  96},
  /* 8x32_G2 */   {0,  0,  0,  0,   32, 32, 32, 32,  64, 64, 64, 64,  96, 96, 96, 96},
  /* 16x16_G1 */  {0, 0,  0,  0,  16, 16, 16, 16,  32, 32, 32, 32,  48, 48, 48, 48,  64, 64, 64, 64,  80, 80, 80, 80,  96, 96, 96, 96,  112, 112, 112, 112},
  /* 16x16_G2 */  {8, 8,  8,  8,  8,  8,  8,  8,   40, 40, 40, 40, 40, 40, 40, 40,  72, 72, 72, 72, 72, 72, 72, 72,  104, 104, 104, 104, 104, 104, 104, 104},
  /* 16x16_G3 */  {8, 8,  8,  8,   40, 40, 40, 40,  72, 72, 72, 72,  104, 104, 104, 104},
  /* 16x8_G1 */   {0, 0,  0,  0,   8, 8,  8,  8,   16, 16, 16, 16, 24, 24, 24, 24,  32, 32, 32, 32,  40, 40, 40, 40,  48, 48, 48, 48,  56, 56, 56, 56,  64, 64, 64, 64,  72, 72, 72, 72,  80, 80, 80, 80,  88, 88, 88, 88,  96, 96, 96, 96,  104, 104, 104, 104, 112, 112, 112, 112, 120, 120, 120, 120},
  /* 16x8_G2 */   {4, 4,  4,  4,  4,  4,  4,  4,  20, 20, 20, 20, 20, 20, 20, 20, 36, 36, 36, 36, 36, 36, 36, 36, 52, 52, 52, 52, 52, 52, 52, 52, 68, 68, 68, 68, 68, 68, 68, 68, 84, 84, 84, 84, 84, 84, 84, 84,  100, 100, 100, 100, 100, 100, 100, 100, 116, 116, 116, 116, 116, 116, 116, 116},
  /* 16x8_G3 */   {12, 12, 12, 12, 12, 12, 12, 12,  44, 44, 44, 44, 44, 44, 44, 44, 76, 76, 76, 76, 76, 76, 76, 76,  108, 108, 108, 108, 108, 108, 108, 108},
  /* 16x8_G4 */   {4, 4,  4,  4,   20, 20, 20, 20,  36, 36, 36, 36,  52, 52, 52, 52,  68, 68, 68, 68,  84, 84, 84, 84,  100, 100, 100, 100, 116, 116, 116, 116},
  /* 16x8_G5 */   {12, 12, 12, 12,  44, 44, 44, 44,  76, 76, 76, 76,  108, 108, 108, 108},
  /* 8x16_G1 */   {0, 0,  0,  0,  0,  0,  0,   0,   16, 16, 16, 16, 16, 16, 16,  16,  32, 32, 32, 32, 32, 32, 32,  32,  48, 48, 48, 48, 48, 48, 48,  48,  64, 64, 64, 64, 64, 64, 64,  64,  80, 80, 80, 80, 80, 80, 80,  80,  96, 96, 96, 96, 96, 96, 96,  96,  112, 112, 112, 112, 112, 112, 112, 112}, // QT-QT-
  /* 8x16_G2 */   {8, 8, 8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,   8,   8,   40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,  40,  40,  72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,  72,  72,  104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104}, // QT-QT-
  /* 8x16_G3 */   {0,  0,  0,  0,   16, 16, 16, 16,  32, 32, 32, 32,  48, 48, 48, 48,  64, 64, 64, 64,  80, 80, 80, 80,  96, 96, 96, 96,  112, 112, 112, 112}, // QT-QT-
  /* 8x16_G4 */   {8,  8,  8,  8,   40, 40, 40, 40,  72, 72, 72, 72,  104, 104, 104, 104}, // QT-QT-
  /* 8x16_G5 */   {8, 8,  8,  8,  8,  8,  8,   8,   40, 40, 40, 40, 40, 40, 40,  40,  72, 72, 72, 72, 72, 72, 72,  72,  104, 104, 104, 104, 104, 104, 104, 104}, // QT-QT-
  
  // SIZEID = 1
  /* 32x4 */      {0, 0, 0, 0, 4, 4, 4, 4, 8, 8, 8, 8, 12, 12, 12, 12, 16, 16, 16, 16, 20, 20, 20, 20, 24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 36, 36, 36, 36, 40, 40, 40, 40, 44, 44, 44, 44, 48, 48, 48, 48, 52, 52, 52, 52, 56, 56, 56, 56, 60, 60, 60, 60, 64, 64, 64, 64, 68, 68, 68, 68, 72, 72, 72, 72, 76, 76, 76, 76, 80, 80, 80, 80, 84, 84, 84, 84, 88, 88, 88, 88, 92, 92, 92, 92, 96, 96, 96, 96, 100, 100, 100, 100, 104, 104, 104, 104, 108, 108, 108, 108, 112, 112, 112, 112, 116, 116, 116, 116, 120, 120, 120, 120, 124, 124, 124, 124},
  /* 4x32 */      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
  /* 16x4 */      {0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28, 28, 28, 28, 32, 32, 32, 32, 32, 32, 32, 32, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 40, 40, 40, 40, 40, 40, 44, 44, 44, 44, 44, 44, 44, 44, 48, 48, 48, 48, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 56, 56, 56, 56, 56, 56, 56, 56, 60, 60, 60, 60, 60, 60, 60, 60, 64, 64, 64, 64, 64, 64, 64, 64, 68, 68, 68, 68, 68, 68, 68, 68, 72, 72, 72, 72, 72, 72, 72, 72, 76, 76, 76, 76, 76, 76, 76, 76, 80, 80, 80, 80, 80, 80, 80, 80, 84, 84, 84, 84, 84, 84, 84, 84, 88, 88, 88, 88, 88, 88, 88, 88, 92, 92, 92, 92, 92, 92, 92, 92, 96, 96, 96, 96, 96, 96, 96, 96, 100, 100, 100, 100, 100, 100, 100, 100, 104, 104, 104, 104, 104, 104, 104, 104, 108, 108, 108, 108, 108, 108, 108, 108, 112, 112, 112, 112, 112, 112, 112, 112, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 124, 124, 124, 124, 124, 124, 124, 124},
  /* 4x16 */      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},


/* 8x8 */         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
/* 8x4 1half */         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
/* 8x4 2half */         {64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
/* 4x8 1half */         {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
/* 4x8 2half */         {64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},

/* 16x4_G123 */    {0, 0, 0, 0, 4, 4, 4, 4, 8, 8, 8, 8, 12, 12, 12, 12, 16, 16, 16, 16, 20, 20, 20, 20, 24, 24, 24, 24, 28, 28, 28, 28, 32, 32, 32, 32, 36, 36, 36, 36, 40, 40, 40, 40, 44, 44, 44, 44, 48, 48, 48, 48, 52, 52, 52, 52, 56, 56, 56, 56, 60, 60, 60, 60, 64, 64, 64, 64, 68, 68, 68, 68, 72, 72, 72, 72, 76, 76, 76, 76, 80, 80, 80, 80, 84, 84, 84, 84, 88, 88, 88, 88, 92, 92, 92, 92, 96, 96, 96, 96, 100, 100, 100, 100, 104, 104, 104, 104, 108, 108, 108, 108, 112, 112, 112, 112, 116, 116, 116, 116, 120, 120, 120, 120, 124, 124, 124, 124},
/* 4x16_G123 */    {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
/* 8x8_G1 */      {0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32, 32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48, 48, 48, 48, 48, 48, 56, 56, 56, 56, 56, 56, 56, 56, 64, 64, 64, 64, 64, 64, 64, 64, 72, 72, 72, 72, 72, 72, 72, 72, 80, 80, 80, 80, 80, 80, 80, 80, 88, 88, 88, 88, 88, 88, 88, 88, 96, 96, 96, 96, 96, 96, 96, 96, 104, 104, 104, 104, 104, 104, 104, 104, 112, 112, 112, 112, 112, 112, 112, 112, 120, 120, 120, 120, 120, 120, 120, 120},
/* 8x8_G2 */      {0, 0, 0, 0, 24, 24, 24, 24, 32, 32, 32, 32, 56, 56, 56, 56, 64, 64, 64, 64, 88, 88, 88, 88, 96, 96, 96, 96, 120, 120, 120, 120},
/* 8x8_G3 */      {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
/* 8x8_G4 */      {12, 12, 12, 12, 12, 12, 12, 12, 44, 44, 44, 44, 44, 44, 44, 44, 76, 76, 76, 76, 76, 76, 76, 76, 108, 108, 108, 108, 108, 108, 108, 108},
/* 8x8_G5 */      {4, 4, 4, 4, 4, 4, 4, 4, 20, 20, 20, 20, 20, 20, 20, 20, 36, 36, 36, 36, 36, 36, 36, 36, 52, 52, 52, 52, 52, 52, 52, 52, 68, 68, 68, 68, 68, 68, 68, 68, 84, 84, 84, 84, 84, 84, 84, 84, 100, 100, 100, 100, 100, 100, 100, 100, 116, 116, 116, 116, 116, 116, 116, 116},
/* 8x4_G1 */      {0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28, 28, 28, 28, 32, 32, 32, 32, 32, 32, 32, 32, 36, 36, 36, 36, 36, 36, 36, 36, 40, 40, 40, 40, 40, 40, 40, 40, 44, 44, 44, 44, 44, 44, 44, 44, 48, 48, 48, 48, 48, 48, 48, 48, 52, 52, 52, 52, 52, 52, 52, 52, 56, 56, 56, 56, 56, 56, 56, 56, 60, 60, 60, 60, 60, 60, 60, 60, 64, 64, 64, 64, 64, 64, 64, 64, 68, 68, 68, 68, 68, 68, 68, 68, 72, 72, 72, 72, 72, 72, 72, 72, 76, 76, 76, 76, 76, 76, 76, 76, 80, 80, 80, 80, 80, 80, 80, 80, 84, 84, 84, 84, 84, 84, 84, 84, 88, 88, 88, 88, 88, 88, 88, 88, 92, 92, 92, 92, 92, 92, 92, 92, 96, 96, 96, 96, 96, 96, 96, 96, 100, 100, 100, 100, 100, 100, 100, 100, 104, 104, 104, 104, 104, 104, 104, 104, 108, 108, 108, 108, 108, 108, 108, 108, 112, 112, 112, 112, 112, 112, 112, 112, 116, 116, 116, 116, 116, 116, 116, 116, 120, 120, 120, 120, 120, 120, 120, 120, 124, 124, 124, 124, 124, 124, 124, 124},
/* 4x8_G2 */      {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},

};

// This is used as a stride when we must access information from multiple CU sizes in the same buffer
const unsigned short ALL_stridedCusPerCtu[48] = { 
    // ALIGNED
    0,                          // 64x64
    0+4,                        // 32x32
    0+4+16,                     // 32x16
    0+4+16+32,                  // 16x32

    0+4+16+32+32,               // 32x8
    0+4+16+32+32+64,            // 8x32


    0+4+16+32+32+64+64,         // 16x16

    0+4+16+32+32+64+64+64,      // 16x8
    0+4+16+32+32+64+64+64+128,   // 8x16

    // 0+4+16+32+32+64+64+64+128+128   // ALIGNED TOTAL_CUS_PER_CTU = 532


    // NOT ALIGNED
    532                                                           ,// 32x16
    532+16                                                        ,// 16x32
    532+16+16                                                     ,// 32x8_G1
    532+16+16+32                                                  ,// 32x8_G2
    532+16+16+32+16                                               ,// 8x32_G1
    532+16+16+32+16+32                                            ,// 8x32_G2
    532+16+16+32+16+32+16                                         ,// 16x16_G1
    532+16+16+32+16+32+16+32                                      ,// 16x16_G2
    532+16+16+32+16+32+16+32+32                                   ,// 16x16_G3 	UNALIGNED
    532+16+16+32+16+32+16+32+32+16                                ,// 16x8_G1
    532+16+16+32+16+32+16+32+32+16+64                             ,// 16x8_G2
    532+16+16+32+16+32+16+32+32+16+64+64                          ,// 16x8_G3
    532+16+16+32+16+32+16+32+32+16+64+64+32                       ,// 16x8_G4 	UNALIGNED
    532+16+16+32+16+32+16+32+32+16+64+64+32+32                    ,// 16x8_G5 	UNALIGNED
    532+16+16+32+16+32+16+32+32+16+64+64+32+32+16                 ,// 8x16_G1
    532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64              ,// 8x16_G2
    532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64           ,// 8x16_G3
    532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32        ,// 8x16_G4 	UNALIGNED
    532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16     ,// 8x16_G5 	UNALIGNED
    
    // 0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16+32   // NOT ALIGNED TOTAL_NA_CUS_PER_CTU = 624

    // SIZEID = 1
    1156                                                         ,// 32x4
    1156 + 128                                                   ,// 4x32
    1156 + 128 + 128                                             ,// 16x4
    1156 + 128 + 128 + 256                                       ,// 4x16

    1156 + 128 + 128 + 256 + 256                                ,// 8x8 ALIGNED

    1156 + 128 + 128 + 256 + 256 + 256                          ,// 8x4 ALIGNED 1half
    1156 + 128 + 128 + 256 + 256 + 256 + 256                         ,// 8x4 ALIGNED 2half
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256                    ,// 4x8 ALIGNED 1half
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256                    ,// 4x8 ALIGNED 2half

    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256              ,// 16x4_G123
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128                        ,// 4x16_G123
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128                  ,// 8x8_G1
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128            ,// 8x8_G2
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32       ,// 8x8_G3
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 ,// 8x8_G4
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32            ,// 8x8_G5 // UNALIGNED
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64       ,// 8x4_G1
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 + 256,// 4x8_G2  
    
    // SizeId=0
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 + 256 + 256,        // 4x4
    
    1156 + 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 + 256 + 256 + 1024

   };

const char ALL_numPredModes[47]  = {
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    // SizeId=1
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    // SizeId=0
    16
};

// This is used as a stride when we must access the prediction signal of multiple CUs
// Since CUs of different size may have 8x8 or 4x4 samples it is not possible to compute the stride manually
const long unsigned int ALL_stridedPredictionsPerCtu[48] = { 
    // predModes*numSamples*numCus

    // SizeID=2 At this size all preditions have 8x8 samples
    // ALIGNED
    12*64*( 0 ),                          // 64x64
    12*64*( 0+4 ),                        // 32x32
    12*64*( 0+4+16 ),                     // 32x16
    12*64*( 0+4+16+32 ),                  // 16x32

    12*64*( 0+4+16+32+32 ),               // 32x8
    12*64*( 0+4+16+32+32+64 ),            // 8x32


    12*64*( 0+4+16+32+32+64+64 ),         // 16x16

    12*64*( 0+4+16+32+32+64+64+64 ),      // 16x8
    12*64*( 0+4+16+32+32+64+64+64+128 ),   // 8x16

    // 0+4+16+32+32+64+64+64+128+128   // ALIGNED TOTAL_CUS_PER_CTU = 532


    // NOT ALIGNED
    12*64*( 532 )                                                           ,// 32x16
    12*64*( 532+16 )                                                        ,// 16x32
    12*64*( 532+16+16 )                                                     ,// 32x8_G1
    12*64*( 532+16+16+32 )                                                  ,// 32x8_G2
    12*64*( 532+16+16+32+16 )                                               ,// 8x32_G1
    12*64*( 532+16+16+32+16+32 )                                            ,// 8x32_G2
    12*64*( 532+16+16+32+16+32+16 )                                         ,// 16x16_G1
    12*64*( 532+16+16+32+16+32+16+32 )                                      ,// 16x16_G2
    12*64*( 532+16+16+32+16+32+16+32+32 )                                   ,// 16x16_G3 	UNALIGNED
    12*64*( 532+16+16+32+16+32+16+32+32+16 )                                ,// 16x8_G1
    12*64*( 532+16+16+32+16+32+16+32+32+16+64 )                             ,// 16x8_G2
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64 )                          ,// 16x8_G3
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32 )                       ,// 16x8_G4 	UNALIGNED
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32 )                    ,// 16x8_G5 	UNALIGNED
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16 )                 ,// 8x16_G1
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64 )              ,// 8x16_G2
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64 )           ,// 8x16_G3
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32 )        ,// 8x16_G4 	UNALIGNED
    12*64*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16 )     ,// 8x16_G5 	UNALIGNED
    
    // 0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16+32   // NOT ALIGNED TOTAL_NA_CUS_PER_CTU = 624

    // SIZEID = 1 At this size all predictions have 4x4 samples
    12*64*1156                                                         ,// 32x4
    12*64*1156 + 16*16*( 128 )                                                   ,// 4x32
    12*64*1156 + 16*16*( 128 + 128 )                                             ,// 16x4
    12*64*1156 + 16*16*( 128 + 128 + 256 )                                       ,// 4x16

    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 )                                ,// 8x8 ALIGNED

    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 )                          ,// 8x4 ALIGNED 1half
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 )                         ,// 8x4 ALIGNED 2half
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 )                    ,// 4x8 ALIGNED 1half
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 )                    ,// 4x8 ALIGNED 2half

    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 )              ,// 16x4_G123
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 )                        ,// 4x16_G123
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 )                  ,// 8x8_G1
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 )            ,// 8x8_G2
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 )       ,// 8x8_G3
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 ) ,// 8x8_G4
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 )            ,// 8x8_G5 // UNALIGNED
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 )       ,// 8x4_G1
    12*64*1156 + 16*16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 + 256 ),// 4x8_G2  

    // SizeId=0
    12*64*1156 + 16*16*3200,                                                                                                // 4x4 

    12*64*1156 + 16*16*3200 + 32*16*1024

   };

// This is used as a stride when we must access the distortion for multiple CUs
// Since CUs of different size may have 12 or 16 modes it is not possible to compute the stride manually
const unsigned int ALL_stridedDistortionsPerCtu[48] = { 
    // predModes*numSamples* ( numCus )

    // SizeID=2 At this size all CUs have 12 modes
    // ALIGNED
    12*( 0 ),                          // 64x64
    12*( 0+4 ),                        // 32x32
    12*( 0+4+16 ),                     // 32x16
    12*( 0+4+16+32 ),                  // 16x32

    12*( 0+4+16+32+32 ),               // 32x8
    12*( 0+4+16+32+32+64 ),            // 8x32


    12*( 0+4+16+32+32+64+64 ),         // 16x16

    12*( 0+4+16+32+32+64+64+64 ),      // 16x8
    12*( 0+4+16+32+32+64+64+64+128 ),   // 8x16

    // 0+4+16+32+32+64+64+64+128+128   // ALIGNED TOTAL_CUS_PER_CTU = 532


    // NOT ALIGNED
    12*( 532 )                                                           ,// 32x16
    12*( 532+16 )                                                        ,// 16x32
    12*( 532+16+16 )                                                     ,// 32x8_G1
    12*( 532+16+16+32 )                                                  ,// 32x8_G2
    12*( 532+16+16+32+16 )                                               ,// 8x32_G1
    12*( 532+16+16+32+16+32 )                                            ,// 8x32_G2
    12*( 532+16+16+32+16+32+16 )                                         ,// 16x16_G1
    12*( 532+16+16+32+16+32+16+32 )                                      ,// 16x16_G2
    12*( 532+16+16+32+16+32+16+32+32 )                                   ,// 16x16_G3 	UNALIGNED
    12*( 532+16+16+32+16+32+16+32+32+16 )                                ,// 16x8_G1
    12*( 532+16+16+32+16+32+16+32+32+16+64 )                             ,// 16x8_G2
    12*( 532+16+16+32+16+32+16+32+32+16+64+64 )                          ,// 16x8_G3
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32 )                       ,// 16x8_G4 	UNALIGNED
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32 )                    ,// 16x8_G5 	UNALIGNED
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16 )                 ,// 8x16_G1
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64 )              ,// 8x16_G2
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64 )           ,// 8x16_G3
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32 )        ,// 8x16_G4 	UNALIGNED
    12*( 532+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16 )     ,// 8x16_G5 	UNALIGNED
    
    // 0+16+16+32+16+32+16+32+32+16+64+64+32+32+16+64+64+32+16+32   // NOT ALIGNED TOTAL_NA_CUS_PER_CTU = 624

    // SIZEID = 1 At this size all CUs have 16 modes
    12*1156                                                         ,// 32x4
    12*1156 + 16*( 128 )                                                   ,// 4x32
    12*1156 + 16*( 128 + 128 )                                             ,// 16x4
    12*1156 + 16*( 128 + 128 + 256 )                                       ,// 4x16

    12*1156 + 16*( 128 + 128 + 256 + 256 )                                ,// 8x8 ALIGNED

    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 )                          ,// 8x4 ALIGNED 1half
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 )                         ,// 8x4 ALIGNED 2half
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 )                    ,// 4x8 ALIGNED 1half
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 )                    ,// 4x8 ALIGNED 2half

    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 )              ,// 16x4_G123
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 )                        ,// 4x16_G123
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 )                  ,// 8x8_G1
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 )            ,// 8x8_G2
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 )       ,// 8x8_G3
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 ) ,// 8x8_G4
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 )            ,// 8x8_G5 // UNALIGNED
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 )       ,// 8x4_G1
    12*1156 + 16*( 128 + 128 + 256 + 256 + 256 + 256 + 256 + 256 + 256 + 128 + 128 + 128 + 32 + 128 + 32 + 64 + 256 ),// 4x8_G2  
    
    // SizeId=0
    12*1156 + 16*3200,                                                                                                 // 4x4        

    12*1156 + 16*3200 + 32*1024

   };
